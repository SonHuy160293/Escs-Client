@{
    ViewData["Title"] = "Statistics Visualization";
    var url = ViewBag.Url;
    var method = ViewBag.Method;
}
<head>


    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .total-value {
            font-size: 15px;
            font-weight: bold;
            color: #fff;
            background-color: #ff0000; /* Blue background */
            padding: 10px;
            border-radius: 5px;
            text-align: center;
            width: auto;
            max-width: 200px;
            margin-top: 20px;
        }
    </style>
</head>

<div id="content" class="content p-4">
    <div class="container">
        <h3 class="text-center mb-2">Endpoint Detail Statistics</h3>

        <div class="row mb-4">

            <!-- Filters Section -->
            <div class="col-md-2">
                <label for="relativeFilter" class="form-label">Relative Filter:</label>
                <select id="relativeFilter" class="form-select">
                    <option value="last15Minutes">Last 15 Minutes</option>
                    <option value="last30Minutes">Last 30 Minutes</option>
                    <option value="lastHour">Last Hour</option>
                    <option value="lastDay" selected>Last Day</option>
                    <option value="lastMonth">Last Month</option>
                </select>
            </div>
            <div class="col-md-6">
                <label class="form-label">Absolute Filter:</label>
                <div class="d-flex gap-2">
                    <input type="datetime-local" id="fromDate" class="form-control" placeholder="From Date">
                    <input type="datetime-local" id="toDate" class="form-control" placeholder="To Date">
                    <button id="absoluteFilterApply" class="btn btn-primary">Apply</button>
                </div>
            </div>
            <div class="col-md-2">
                <label for="statusSelect" class="form-label">Status Code</label>
                <select id="statusSelect" class="form-select">
                    <option value="">Choose a status</option>
                    <option value="1XX">1XX</option>
                    <option value="2XX">2XX</option>
                    <option value="3XX">3XX</option>
                    <option value="4XX">4XX</option>
                    <option value="5XX">5XX</option>
                </select>
            </div>
            <div class="col-md-2">
                <button id="resetButton" class="btn btn-primary" style="margin-top: 30px">
                    Reset
                </button>
            </div>
        </div>

        <!-- Chart -->
        <div class="mb-4">
            <canvas id="barChart" width="400" height="150"></canvas>
        </div>

        <!-- Total Value -->
        <div id="totalValue" class="total-value">Total: 0</div>
    </div>


</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            const apiUrl = 'http://localhost:5280/api/Logs/endpoint-detail-statistic';
            const requestPath = "@ViewBag.Url"; // Ensure this is a string from the server
            const method = "@ViewBag.Method";   // Ensure this is a string from the server
            let barChart;
            const ctx = document.getElementById('barChart').getContext('2d');
            // Render chart function
            function renderChart(labels, data, averageProcessedTimes) {
                if (barChart) {
                    barChart.destroy();
                }
                barChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [
                            {
                                label: 'Response Statistics',
                                data: data,
                                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                borderColor: 'rgba(75, 192, 192, 1)',
                                borderWidth: 1,
                            },
                        ],
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true,
                            },
                        },
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: function (context) {
                                        const label = context.dataset.label || '';
                                        const value = context.raw;
                                        const averageProcessedTime = averageProcessedTimes[context.dataIndex];
                                        return `${label}: ${value} (Avg: ${averageProcessedTime} ms)`;
                                    },
                                },
                            },
                        },
                    },
                });
            }

            // Format date to "dd-MM-yyyy HH:mm:ss"
            function formatDateToApi(date) {
                const options = {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit',
                };

                const formattedDate = new Intl.DateTimeFormat('en-GB', options)
                    .format(date)
                    .replace(/,/, '')
                    .replace(/\//g, '-');
                return formattedDate;
            }

            // Validate date range
            function validateDateRange(fromDate, toDate) {
                const from = new Date(fromDate);
                const to = new Date(toDate);
                return from < to;
            }

            // Fetch data and update chart
            async function fetchStatistics(params) {
                try {
                    const queryString = new URLSearchParams(params).toString();
                    const response = await fetch(`${apiUrl}?${queryString}`, {
                        headers: {
                            'accept': '*/*'
                        }
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const data = await response.json();
                    const labels = Object.keys(data.data);
                    const totalResponse = Object.values(data.data).map(item => item.totalResponse);
                    const averageProcessedTime = Object.values(data.data).map(item => item.averageProcessedTime);

                    $('#totalValue').text(`Total: ${data.total}`);
                    renderChart(labels, totalResponse, averageProcessedTime);
                } catch (error) {
                    console.error('API call failed:', error);
                }
            }

            // Handle relative filter change
            $('#relativeFilter').change(function () {
                const selectedOption = $(this).val();
                const now = new Date();
                const filterToDate = formatDateToApi(now);
                let fromDate;

                switch (selectedOption) {
                    case 'last15Minutes':
                        fromDate = new Date(now.getTime() - 15 * 60000);
                        break;
                    case 'last30Minutes':
                        fromDate = new Date(now.getTime() - 30 * 60000);
                        break;
                    case 'lastHour':
                        fromDate = new Date(now.getTime() - 60 * 60000);
                        break;
                    case 'lastDay':
                        fromDate = new Date(now.getTime() - 24 * 60 * 60000);
                        break;
                    case 'lastMonth':
                        fromDate = new Date(now.setMonth(now.getMonth() - 1));
                        break;
                    default:
                        return;
                }

                const from = new Date(fromDate);
                const filterFromDate = formatDateToApi(from);
                const statusCode = $('#statusSelect').val() || '';
                const params = {
                    FromDate: filterFromDate,
                    ToDate: filterToDate,
                    Environment: 'Development',
                    RequestPath: requestPath,
                    Method: method,
                    Index: 'application-logs-emails-api-development-*',
                    StatusCode: statusCode
                };

                fetchStatistics(params);
            });

            // Handle absolute filter apply
            $('#absoluteFilterApply').click(function () {
                const fromDate = $('#fromDate').val();
                const toDate = $('#toDate').val();

                if (!validateDateRange(fromDate, toDate)) {
                    alert('Invalid date range. Ensure To Date is greater than From Date.');
                    return;
                }

                const from = new Date(fromDate);
                const to = new Date(toDate);

                const filterFromDate = formatDateToApi(from);
                const filterToDate = formatDateToApi(to);
                const statusCode = $('#statusSelect').val() || '';
                const params = {
                    FromDate: filterFromDate,
                    ToDate: filterToDate,
                    Environment: 'Development',
                    RequestPath: requestPath,
                    Method: method,
                    Index: 'application-logs-emails-api-development-*',
                    StatusCode: statusCode
                };

                fetchStatistics(params);
            });

            // Disable toDate until fromDate is selected
            $('#toDate').prop('disabled', true);

            // When fromDate is selected, enable toDate and ensure it is greater than fromDate
            $('#fromDate').on('change', function () {
                const fromDate = new Date($('#fromDate').val());
                const toDate = $('#toDate').val();

                if (fromDate) {
                    $('#toDate').prop('disabled', false);

                    // Set the min date for toDate
                    $('#toDate').attr('min', $('#fromDate').val());
                } else {
                    $('#toDate').prop('disabled', true);
                }
            });

            $('#statusSelect').change(function () {
                const fromDate = $('#fromDate').val();
                const toDate = $('#toDate').val();
                const selectedOption = $('#relativeFilter').val();
                const statusCode = $(this).val() || '';


                if (fromDate && toDate) {
                    const from = new Date(fromDate);
                    const to = new Date(toDate);

                    const filterFromDate = formatDateToApi(from);
                    const filterToDate = formatDateToApi(to);
                    const statusCode = $('#statusSelect').val() || '';
                    const params = {
                        FromDate: filterFromDate,
                        ToDate: filterToDate,
                        Environment: 'Development',
                        RequestPath: requestPath,
                        Method: method,
                        Index: 'application-logs-emails-api-development-*',
                        StatusCode: statusCode
                    };

                    fetchStatistics(params);
                } else if (selectedOption) {
                    const now = new Date();
                    const filterToDate = formatDateToApi(now);
                    let fromDate;

                    switch (selectedOption) {
                        case 'last15Minutes':
                            fromDate = new Date(now.getTime() - 15 * 60000);
                            break;
                        case 'last30Minutes':
                            fromDate = new Date(now.getTime() - 30 * 60000);
                            break;
                        case 'lastHour':
                            fromDate = new Date(now.getTime() - 60 * 60000);
                            break;
                        case 'lastDay':
                            fromDate = new Date(now.getTime() - 24 * 60 * 60000);
                            break;
                        case 'lastMonth':
                            fromDate = new Date(now.setMonth(now.getMonth() - 1));
                            break;
                        default:
                            return;
                    }

                    const from = new Date(fromDate);
                    const filterFromDate = formatDateToApi(from);
                    const statusCode = $('#statusSelect').val() || '';
                    const params = {
                        FromDate: filterFromDate,
                        ToDate: filterToDate,
                        Environment: 'Development',
                        RequestPath: requestPath,
                        Method: method,
                        Index: 'application-logs-emails-api-development-*',
                        StatusCode: statusCode
                    };

                    fetchStatistics(params);
                }


            });

            // Initial Chart Setup (Empty)
            renderChart([], [], []);

            // Set default statistics
            function setDefaultStatistics() {
                const now = new Date();
                const filterToDate = formatDateToApi(now);
                let fromDate;
                fromDate = new Date(now.getTime() - 15 * 60000);

                const filterFromDate = formatDateToApi(fromDate);
             

                const statusCode = $('#statusSelect').val() || '';
                fetchStatistics({
                    FromDate: filterFromDate,
                    ToDate: filterToDate,
                    Environment: 'Development',
                    RequestPath: requestPath,
                    Method: method,
                    Index: 'application-logs-emails-api-development-*',
                    StatusCode: statusCode
                });

                // Initial load
                $('#relativeFilter').val("last15Minutes");
               
            }

            // Reset button click
            $('#resetButton').click(function () {
                $('#fromDate').val('');
                $('#toDate').val('');
                $('#toDate').prop('disabled', true);
                $('#statusSelect').val('');
                $('#endpointSelect').val('');
                setDefaultStatistics();
            });

            setDefaultStatistics();
        });
    </script>

}




